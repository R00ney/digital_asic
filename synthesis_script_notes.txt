#Synthesis Script
#Neal O'Hara from Dr. P.D. Franzon
# 01/26/13

# setup name of the clock in your design. 
set clkname clock  

# set variable "modname" to the name of topmost module in design 
set modname counter  

# set variable "RTL_DIR" to the HDL directory w.r.t synthesis directory
set RTL_DIR    ./  

# set variable "type" to a name that distinguishes this synthesis run 
set type lecture  

#set the number of digits to be used for delay result display 
set report_default_significant_digits 4  

# --------------------------------------------------------- 
# Read in Verilog file and map (synthesize)  
# onto a generic library. 
# MAKE SURE THAT YOU CORRECT ALL WARNINGS THAT APPEAR 
# during the execution of the read command are fixed  
# or understood to have no impact. 
# ALSO CHECK your latch/flip - flop list for unintended  
# latches                                             
# ---------------------------------------------------------  
read_verilog $RTL_DIR/counter.v 


# --------------------------------------------------------- 
# Our first Optimization 'compile' is intended to produce a design  
# that will meet set - up time            
# under worst - case conditions:                          
#     - slowest process corner  
#     - highest operating temperature and lowest Vcc   
#     - expected worst case clock skew                 
# --------------------------------------------------------- 
# --------------------------------------------------------- 
# Set the current design to the top level instance name  
# to make sure that you are working on the right design 
# at the time of constraint setting and compilation 
# ---------------------------------------------------------  
current_design $modname  
# --------------------------------------------------------- 
# Set the synthetic library variable to enable use of desigware blocks 
# ---------------------------------------------------------  
set synthetic_library [list dw_foundation.sldb]   
# --------------------------------------------------------- 
# Specify the worst case (slowest) libraries and slowest temperature/Vcc  
# conditions. This would involve setting up the slow library as the target  
# and setting the link library to the conctenation of the target and the  
# synthetic library 
# ---------------------------------------------------------  
set target_library osu018_stdcells_slow.db  set link_library   [concat  $target_library $synthetic_library]  
# --------------------------------------------------------- 
# Specify a 5000ps clock period with 50% duty cycle and a skew of 300ps                                  
# ---------------------------------------------------------  
set CLK_PER  5  
set CLK_SKEW 0.3  
create_clock -name $clkname -period $CLK_PER -waveform "0 [expr $CLK_PER / 2]" $clkname  
set_clock_uncertainty $CLK_SKEW $clkname 


# --------------------------------------------------------- 
# Now set up the 'CONSTRAINTS' on the design:           
# 1.  How much of the clock period is lost in the modules connected to it?                           
# 2.  What type of cells are driving the inputs?         
# 3.  What type of cells and how many (fanout) must it be able to drive?                                  
# --------------------------------------------------------- 
# --------------------------------------------------------- 
# ASSUME being driven by a slowest D - flip - flop. The DFF cell has a clock - Q  
# delay of 353 ps. Allow another 100 ps for wiring delay at the input to design  
# NOTE: THESE ARE INITIAL ASSUMPTIONS ONLY              
# ---------------------------------------------------------  
set DFF_CKQ 0.353  
set IP_DELAY [expr 0.1 + $DFF_CKQ]  
set_input_delay $IP_DELAY -clock $clkname [remove_from_collection [all_inputs] $clkname]  

# --------------------------------------------------------- 
# ASSUME this module is driving a D - flip - flip. The DFF cell has a set - up time of 919 ps              
# Allow another 100 ps for wiring delay. NOTE: THESE ARE INITIAL ASSUMPTIONS ONLY              
# ---------------------------------------------------------  
set DFF_SETUP 0.919  
set OP_DELAY [expr 0.1 + $DFF_SETUP]  
set_output_delay $OP_DELAY -clock $clkname [all_outputs]  

# ---------------------------------------------------------  
# ASSUME being driven by a D - flip - flop                  
# ---------------------------------------------------------  
set DR_CELL_NAME DFFPOSX1  
set DR_CELL_PIN  Q  
set_driving_cell -lib_cell "$DR_CELL_NAME" -pin "$DR_CELL_PIN" [remove_from_collection [all_inputs] $clkname]  

# --------------------------------------------------------- 
# ASSUME the worst case output load is 4 D - FFs (D - inputs) and  0.2 units of wiring capacitance                       
# ---------------------------------------------------------  
set PORT_LOAD_CELL  osu018_stdcells_slow/DFFPOSX1/D  
set WIRE_LOAD_EST   0.2  
set FANOUT          4  
set PORT_LOAD [expr $WIRE_LOAD_EST + $FANOUT * [load_of $PORT_LOAD_CELL]]  
set_load $PORT_LOAD [all_outputs] 


#--------------------------------------------------------- 
# Now set the GOALS for the compile. In most cases you want minimum area, so set the 
# goal for maximum area to be 0 
#--------------------------------------------------------- 
 set_max_area 0 

#--------------------------------------------------------- 
# This command prevents feedthroughs from input to output and avoids assign statements 
#--------------------------------------------------------- 

 set_fix_multiple_port_nets -all [get_designs] 
#------------------------------------------------------ 
# During the initial map (synthesis), Synopsys might have built parts (such as adders) 
# using its DesignWare(TM) library. In order to remap the design to our TSMC025 library 
# AND to create scope for logic reduction, I want to 'flatten out' the DesignWare 
# components. i.e. Make one flat design 'replace_synthetic' is the cleanest way of 
# doing this. Another way is “ungroup –all –flatten” 
#------------------------------------------------------ 
 replace_synthetic -ungroup 

#--------------------------------------------------------- 
# check_design checks for consistency of design and issues # warnings and errors. An 
# error would imply the design is not compilable. Do “man check_design” for more info. 
#--------------------------------------------------------- 
 check_design 

#--------------------------------------------------------- 
# link performs check for presence of the design components instantiated within the design. 
# It makes sure that all the components (either library unit or other designs within the 
# hierarchy) are present in the search path and connects all of the disparate components 
# logically to the present design. Do “man link” or more information. 
#--------------------------------------------------------- 
 link 

#--------------------------------------------------------- 
# Now resynthesize the design to meet constraints, and try to best achieve the goal, and 
# using the CMOSX parts. In large designs, compile can take a lllooonnnnggg time! 
# -map_effort specifies how much optimization effort there is, i.e. low, medium, or high. 
# Use high to squeeze out those last picoseconds. 
# -verify_effort specifies how much effort to spend making sure that the input and output 
# designs are equivalent logically. This argument is generally avoided. 
#--------------------------------------------------------- 

 compile -map_effort medium

#--------------------------------------------------------- 
# Now trace the critical (slowest) path and see if 
# the timing works. 
# If the slack is NOT met, you HAVE A PROBLEM and 
# need to redesign or try some other minimization 
# tricks that Synopsys can do 
#--------------------------------------------------------- 
report_timing > timing_max_slow_${type}.rpt 
#report_timing -delay min -nworst 30 > timing_report_min_slow_30.rpt
#report_timing -delay max -nworst 30 > timing_report_max_slow_30.rpt

#--------------------------------------------------------- 
# This is your section to do different things to 
# improve timing or area - RTFM (Read The Manual) :) 
#---------------------------------------------------------

#--------------------------------------------------------- 
# Specify the fastest process corner and lowest temp 
# and highest (fastest) Vcc 
#--------------------------------------------------------- 
 set target_library osu018_stdcells_fast.db 
 set link_library osu018_stdcells_slow.db 
 translate 

#--------------------------------------------------------- 
# Since we have a 'new' library, we need to do this 
# again 
#--------------------------------------------------------- 

#--------------------------------------------------------- 
# Set the design rule to 'fix hold time violations' 
# Then compile the design again, telling Synopsys to 
# only change the design if there are hold time 
# violations. 
#--------------------------------------------------------- 
 set_fix_hold clock 
 compile -only_design_rule –incremental 

#--------------------------------------------------------- 
# Report the fastest path. Make sure the hold 
# is actually met. 
#--------------------------------------------------------- 
 report_timing -delay min > timing_min_fast_holdcheck_${type}.rpt 

#--------------------------------------------------------- 
# Write out the 'fastest' (minimum) timing file 
# in Standard Delay Format. We might use this in 
# later verification. 
#--------------------------------------------------------- 

 write_sdf counter_min.sdf
 
 #--------------------------------------------------------- 
# Since Synopsys has to insert logic to meet hold violations, we might find that we have setup 
# violations now. So lets recheck with the slowest corner, etc. 
# YOU have problems if the slack is NOT MET. 'translate' means 'translate to new library' 
#--------------------------------------------------------- 

 set target_library osu018_stdcells_slow.db 
 set link_library osu018_stdcells_fast.db 
 translate 
 report_timing > timing_max_slow_holdfixed_${type}.rpt 

#--------------------------------------------------------- 
# Write out area distribution for the final design 
#--------------------------------------------------------- 
 report_cell > cell_report_final.rpt 

#--------------------------------------------------------- 
# Write out the resulting netlist in Verliog format for use 
# by other tools in Encounter for Place and Route of the design 
#--------------------------------------------------------- 
 change_names -rules verilog -hierarchy > fixed_names_init 
 write -hierarchy -f verilog -o counter_final.v 

#--------------------------------------------------------- 
# Write out the 'slowest' (maximum) timing file 
# in Standard Delay Format. We could use this in 
# later verification. 
#--------------------------------------------------------- 

 write_sdf counter_max.sdf
 
 
 